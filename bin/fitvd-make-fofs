#!/usr/bin/env python
"""
send in DES meds files for this
"""
from __future__ import print_function

import os
import argparse
import fitvd
import fitsio
import esutil as eu
import ngmix.medsreaders

parser = argparse.ArgumentParser()
parser.add_argument('--conf', required=True)
parser.add_argument('--plot', required=True)
parser.add_argument('--output', required=True)
parser.add_argument('meds')

parser.add_argument('--plot-only', action='store_true')
parser.add_argument('--mask', help='use the mask specified in the file')
parser.add_argument('--objmask', help='object id based mask')
parser.add_argument('--bounds', help='use the bounds specified in the file')


def main():
    args = parser.parse_args()
    assert 'meds' not in args.output

    conf = fitvd.files.read_yaml(args.conf)
    fof_conf = conf.get('fofs', None)

    print('loading:', args.meds)

    m = ngmix.medsreaders.NGMixMEDS(args.meds)

    cat = m.get_cat()

    mask = fitvd.masks.load_mask(mask_file=args.mask, bounds_file=args.bounds)
    objmask = fitvd.masks.load_objmask(mask_file=args.objmask)

    if args.plot_only:
        fofs = fitsio.read(args.output, ext='fofs')
    else:
        if fof_conf is None:
            print('making singleton fofs')
            fofs = fitvd.fofs.make_singleton_fofs(
                cat,
                mask=mask,
                objmask=objmask,
            )
            nbr_data = None
        else:
            # convert to arcsec
            radcol = fof_conf['radius_column']
            if 'arcsec' not in radcol:
                print('converting radius to arcsec')
                j = m.get_ngmix_jacobian(0, 0)

                scale = j.scale
                rad = cat[radcol]*scale
                cat[radcol] = rad

            print('getting fof groups')
            nbr_data, fofs = fitvd.fofs.get_fofs(
                cat,
                fof_conf,
                mask=mask,
                objmask=objmask,
            )

        eu.ostools.makedirs_fromfile(args.output)
        print('writing:', args.output)
        with fitsio.FITS(args.output, 'rw', clobber=True) as fits:
            fits.write(fofs, extname='fofs')
            if nbr_data is not None:
                fits.write(nbr_data, extname='nbrs')

    seed = fitvd.util.convert_string_to_seed(os.path.basename(args.meds))
    fitvd.fofs.plot_fofs(
        m,
        fofs,
        plotfile=args.plot,
        width=4000,
        fof_type='filled circle',
        fof_size=0.2,
        minsize=2,
        seed=seed,
    )


if __name__ == '__main__':
    main()
