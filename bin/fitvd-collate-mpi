#!/usr/bin/env python

import os
import yaml
import navy
import meds
import fitsio
import fitvd
from fitvd import files, split
import esutil as eu
import argparse

parser=argparse.ArgumentParser()
parser.add_argument('--run-config',required=True)
parser.add_argument('--fit-config',required=True)
parser.add_argument('--tilename',required=True)
parser.add_argument('--meds',help='example meds file')

def main():
    args=parser.parse_args()

    def get_data(fname):
        print('reading:',fname)
        with fitsio.FITS(fname) as fits:
            model_fits = fits['model_fits'][:]
            if 'epochs_data' in fits:
                epochs_data = fits['epochs_data'][:]
            else:
                epochs_data=None

            if 'fof_data' in fits:
                fof_data = fits['fof_data'][:]
            else:
                fof_data=None

        return model_fits, epochs_data, fof_data, fname

    if navy.rank == navy.ADMIRAL:

        with open(args.run_config) as fobj:
            config=yaml.load(fobj)
        with open(args.fit_config) as fobj:
            fit_conf=yaml.load(fobj)

        bname=os.path.basename(args.run_config)
        run = bname.replace('.yaml','')

        output_file=files.get_collated_file(run, args.tilename)
        files.makedir_fromfile(output_file)

        print('will write to:',output_file)

        if 'fofs' in fit_conf:
            fof_file=files.get_fof_file(run, args.tilename)
            nbrs,fofst=files.load_fofs(fof_file)
        else:
            assert args.meds is not None,'send meds if not doing fofs'
            m=meds.MEDS(args.meds)
            cat=m.get_cat()
            fofst = fitvd.fofs.make_singleton_fofs(cat)

        fof_splits = split.get_splits_variable(fofst, config['chunksize'], config['threshold'])
        flist=[]
        for start, end in fof_splits:
            flist.append( 
                files.get_split_output(
                    run,
                    args.tilename,
                    start,
                    end,
                    ext='fits',
                )
            )

        tmpdir = files.get_tempdir()
        with files.StagedOutFile(output_file,tmpdir=tmpdir) as sf:
            with fitsio.FITS(sf.path,'rw',clobber=True) as fits:

                admiral = navy.Admiral(flist)
                admiral.orchestrate()
                reports = admiral.reports

                mlist=[]
                elist=[]
                foflist=[]
                for m, e, f, fname in reports:
                    if m is not None:
                        mlist.append(m)
                    if e is not None:
                        elist.append(e)
                    if f is not None:
                        foflist.append(f)

                model_fits = eu.numpy_util.combine_arrlist(mlist)
                epochs_data = eu.numpy_util.combine_arrlist(elist)
                fof_data = eu.numpy_util.combine_arrlist(foflist)

                s = model_fits['id'].argsort()
                model_fits = model_fits[s]

                s = epochs_data['id'].argsort()
                epochs_data = epochs_data[s]

                s = fof_data['fof_id'].argsort()
                fof_data = fof_data[s]

                fits.write(model_fits, extname='model_fits')
                fits.write(epochs_data, extname='epochs_data')
                fits.write(fof_data, extname='fof_data')

    else:
        ship = navy.Ship(get_data)
        ship.go()



if __name__=='__main__':
    main()
 
