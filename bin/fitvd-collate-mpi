#!/usr/bin/env python

from __future__ import print_function

import os
import yaml
import navy
import fitsio
from fitvd import files, split
import esutil as eu
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--run-config', required=True)
parser.add_argument('--fit-config', required=True)
parser.add_argument('--tilename', required=True)
parser.add_argument('--meds', help='example meds file')


def extract_meta(meta_list):
    meta = None
    for i, tmeta in enumerate(meta_list):
        if i == 0:
            meta = tmeta
        else:
            for v in ['ngmix_vers', 'mof_vers', 'fitvd_vers']:
                assert meta[v] == tmeta[v]
    return meta


def main():
    args = parser.parse_args()

    def get_data(fname):
        print('reading:', fname)
        with fitsio.FITS(fname) as fits:
            model_fits = fits['model_fits'][:]
            if 'epochs_data' in fits:
                epochs_data = fits['epochs_data'][:]
            else:
                epochs_data = None

            if 'fof_data' in fits:
                fof_data = fits['fof_data'][:]
            else:
                fof_data = None

            if 'meta_data' in fits:
                meta_data = fits['meta_data'][:]
            else:
                meta_data = None

        return model_fits, epochs_data, fof_data, meta_data, fname

    if navy.rank == navy.ADMIRAL:

        with open(args.run_config) as fobj:
            config = yaml.load(fobj)

        bname = os.path.basename(args.run_config)
        run = bname.replace('.yaml', '')

        output_file = files.get_collated_file(run, args.tilename)
        files.makedir_fromfile(output_file)

        print('will write to:', output_file)

        fof_file = files.get_fof_file(run, args.tilename)
        nbrs, fofst = files.load_fofs(fof_file)

        fof_splits = split.get_splits_variable(
            fofst,
            config['chunksize'],
            config['threshold'],
        )
        flist = []
        for start, end in fof_splits:
            flist.append(
                files.get_split_output(
                    run,
                    args.tilename,
                    start,
                    end,
                    ext='fits',
                )
            )

        tmpdir = files.get_tempdir()
        with files.StagedOutFile(output_file, tmpdir=tmpdir) as sf:
            with fitsio.FITS(sf.path, 'rw', clobber=True) as fits:

                admiral = navy.Admiral(flist)
                admiral.orchestrate()
                reports = admiral.reports

                mlist = []
                elist = []
                foflist = []
                meta_list = []
                for m, e, f, meta, fname in reports:
                    if m is not None:
                        mlist.append(m)
                    if e is not None:
                        elist.append(e)
                    if f is not None:
                        foflist.append(f)
                    if meta is not None:
                        meta_list.append(f)

                meta_data = extract_meta(meta_list)

                model_fits = eu.numpy_util.combine_arrlist(mlist)
                epochs_data = eu.numpy_util.combine_arrlist(elist)
                fof_data = eu.numpy_util.combine_arrlist(foflist)

                s = model_fits['id'].argsort()
                model_fits = model_fits[s]

                s = epochs_data['id'].argsort()
                epochs_data = epochs_data[s]

                s = fof_data['fof_id'].argsort()
                fof_data = fof_data[s]

                fits.write(model_fits, extname='model_fits')
                fits.write(epochs_data, extname='epochs_data')
                fits.write(fof_data, extname='fof_data')

                if meta_data is not None:
                    fits.write(meta_data, extname='meta_data')

    else:
        ship = navy.Ship(get_data)
        ship.go()


if __name__ == '__main__':
    main()
